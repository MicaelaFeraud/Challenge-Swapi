openapi: 3.0.3
info:
  title: SWAPI Challenge API
  version: "1.0.0"
  description: API REST para People, Films, Starships y Vehicles con filtros por name e id.
servers:
  - url: http://localhost:8080
paths:
  /api/people:
    get:
      summary: Lista personas
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: name
          schema: { type: string }
        - in: query
          name: id
          schema: { type: string }
          description: Búsqueda exacta por id (tiene precedencia sobre name)
      responses:
        "200":
          description: Página de resultados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDto'
  /api/people/{id}:
    get:
      summary: Detalle de persona por id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
        "404":
          description: No encontrado
  /api/films:
    get:
      summary: Lista films
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: name
          schema: { type: string }
        - in: query
          name: id
          schema: { type: string }
          description: Búsqueda exacta por id (tiene precedencia sobre name)
      responses:
        "200":
          description: Página de resultados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDto'
  /api/films/{id}:
    get:
      summary: Detalle de film por id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
        "404":
          description: No encontrado
  /api/starships:
    get:
      summary: Lista starships
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: name
          schema: { type: string }
        - in: query
          name: id
          schema: { type: string }
          description: Búsqueda exacta por id (tiene precedencia sobre name)
      responses:
        "200":
          description: Página de resultados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDto'
  /api/starships/{id}:
    get:
      summary: Detalle de starship por id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
        "404":
          description: No encontrado
  /api/vehicles:
    get:
      summary: Lista vehicles
      parameters:
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1 }
        - in: query
          name: name
          schema: { type: string }
        - in: query
          name: id
          schema: { type: string }
          description: Búsqueda exacta por id (tiene precedencia sobre name)
      responses:
        "200":
          description: Página de resultados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDto'
  /api/vehicles/{id}:
    get:
      summary: Detalle de vehicle por id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
        "404":
          description: No encontrado
components:
  schemas:
    PageDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SummaryDto'
        page: { type: integer }
        limit: { type: integer }
        totalPages: { type: integer }
        totalRecords: { type: integer }
        next: { type: string, nullable: true }
        previous: { type: string, nullable: true }
    SummaryDto:
      type: object
      properties:
        id:   { type: string, example: "1" }
        name: { type: string, example: "Luke Skywalker" }
